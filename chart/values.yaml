# Default values for neuvector.
# This is a YAML-formatted file.
# Declare variables to be passed into the templates.

openshift: false
registry: registry1.dso.mil
tag: 5.4.4
oem:
imagePullSecrets: private-registry
psp: false
rbac: true # required for rancher authentication
serviceAccount: default
leastPrivilege: false
global: # required for rancher authentication (https://<Rancher_URL>/)
  cattle:
    url:
  azure:
    enabled: false
    identity:
      clientId: "DONOTMODIFY" # Azure populates this value at deployment time
    marketplace:
      planId: "DONOTMODIFY" # Azure populates this value at deployment time
    extension:
      resourceId: "DONOTMODIFY" # application's Azure Resource ID, Azure populates this value at deployment time
    serviceAccount: csp
    imagePullSecrets:
    images:
      neuvector_csp_pod:
        tag: latest
        image: neuvector-billing-azure-by-suse-llc
        registry: registry.suse.de/suse/sle-15-sp5/update/pubclouds/images
        imagePullPolicy: Always
      controller:
        tag: 5.4.3
        image: controller
        registry: registry1.dso.mil/ironbank/neuvector/neuvector
      manager:
        tag: 5.4.3
        image: manager
        registry: registry1.dso.mil/ironbank/neuvector/neuvector
      enforcer:
        tag: 5.4.3
        image: enforcer
        registry: registry1.dso.mil/ironbank/neuvector/neuvector
  aws:
    enabled: false
    accountNumber: ""
    roleName: ""
    serviceAccount: csp
    annotations: {}
    imagePullSecrets:
    image:
      digest: ""
      repository: neuvector/neuvector-csp-adapter
      tag: latest
      imagePullPolicy: Always

# Set a bootstrap password. If leave empty, default admin password used.
bootstrapPassword: ""

autoGenerateCert: true

defaultValidityPeriod: 365

internal:
  certmanager: # enable when cert-manager is installed for the internal certificates
    enabled: false
    secretname: neuvector-internal
  autoGenerateCert: true
  autoRotateCert: true

controller:
  # If false, controller will not be installed
  enabled: true
  annotations: {}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  image:
    repository: ironbank/neuvector/neuvector/controller
    imagePullPolicy: Always
    hash:
  replicas: 3
  disruptionbudget: 0
  schedulerName:
  priorityClassName:
  podLabels: {}
  podAnnotations:
    traffic.sidecar.istio.io/excludeInboundPorts: "18500"
  containerSecurityContext:
    privileged: true
    runAsUser: 1000
    runAsNonRoot: true
    capabilities:
      drop:
        - ALL
  searchRegistries:
  env: []
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app
                  operator: In
                  values:
                    - neuvector-controller-pod
            topologyKey: "kubernetes.io/hostname"
  tolerations: []
  topologySpreadConstraints: []
  nodeSelector:
    {}
    # key1: value1
    # key2: value2
  apisvc:
    type: ClusterIP
    annotations: {}
    nodePort: null
    # OpenShift Route configuration
    # Controller supports HTTPS only, so edge termination not supported
    route:
      enabled: false
      termination: passthrough
      host:
      tls:
        #certificate: |
        #  -----BEGIN CERTIFICATE-----
        #  -----END CERTIFICATE-----
        #caCertificate: |
        #  -----BEGIN CERTIFICATE-----
        #  -----END CERTIFICATE-----
        #destinationCACertificate: |
        #  -----BEGIN CERTIFICATE-----
        #  -----END CERTIFICATE-----
        #key: |
        #  -----BEGIN PRIVATE KEY-----
        #  -----END PRIVATE KEY-----
  ranchersso: # required for rancher authentication
    enabled: false
  ## BB specific change
  sso:
    certificateAuthority:
      secretName: ""
  pvc:
    enabled: false
    existingClaim: false
    accessModes:
      - ReadWriteMany
    storageClass:
    capacity:
  azureFileShare:
    enabled: false
    secretName:
    shareName:
  certificate:
    secret: ""
    keyFile: tls.key
    pemFile: tls.pem
    #key: |
    #  -----BEGIN PRIVATE KEY-----
    #  -----END PRIVATE KEY-----
    #certificate: |
    #  -----BEGIN CERTIFICATE-----
    #  -----END CERTIFICATE-----
  internal: # this is used for internal communication. Please use the SAME CA for all the components (controller, scanner, adapter and enforcer)
    certificate:
      secret: ""
      keyFile: tls.key
      pemFile: tls.crt
      caFile: ca.crt # must be the same CA for all internal.
  federation:
    mastersvc:
      type:
      loadBalancerIP:
      clusterIP:
      nodePort: # Must be a valid NodePort: 30000-32767
      externalTrafficPolicy:
      internalTrafficPolicy:
      # Federation Master Ingress
      ingress:
        enabled: false
        host: # MUST be set, if ingress is enabled
        ingressClassName: ""
        path: "/" # or this could be "/api", but might need "rewrite-target" annotation
        annotations:
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          # ingress.kubernetes.io/rewrite-target: /
        tls: false
        secretName:
      annotations: {}
      # OpenShift Route configuration
      # Controller supports HTTPS only, so edge termination not supported
      route:
        enabled: false
        termination: passthrough
        host:
        tls:
          #certificate: |
          #  -----BEGIN CERTIFICATE-----
          #  -----END CERTIFICATE-----
          #caCertificate: |
          #  -----BEGIN CERTIFICATE-----
          #  -----END CERTIFICATE-----
          #destinationCACertificate: |
          #  -----BEGIN CERTIFICATE-----
          #  -----END CERTIFICATE-----
          #key: |
          #  -----BEGIN PRIVATE KEY-----
          #  -----END PRIVATE KEY-----
    managedsvc:
      type:
      loadBalancerIP:
      clusterIP:
      nodePort: # Must be a valid NodePort: 30000-32767
      externalTrafficPolicy:
      internalTrafficPolicy:
      # Federation Managed Ingress
      ingress:
        enabled: false
        host: # MUST be set, if ingress is enabled
        ingressClassName: ""
        path: "/" # or this could be "/api", but might need "rewrite-target" annotation
        annotations:
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          # ingress.kubernetes.io/rewrite-target: /
        tls: false
        secretName:
      annotations: {}
      # OpenShift Route configuration
      # Controller supports HTTPS only, so edge termination not supported
      route:
        enabled: false
        termination: passthrough
        host:
        tls:
          #certificate: |
          #  -----BEGIN CERTIFICATE-----
          #  -----END CERTIFICATE-----
          #caCertificate: |
          #  -----BEGIN CERTIFICATE-----
          #  -----END CERTIFICATE-----
          #destinationCACertificate: |
          #  -----BEGIN CERTIFICATE-----
          #  -----END CERTIFICATE-----
          #key: |
          #  -----BEGIN PRIVATE KEY-----
          #  -----END PRIVATE KEY-----
  ingress:
    enabled: false
    host: # MUST be set, if ingress is enabled
    ingressClassName: ""
    path: "/" # or this could be "/api", but might need "rewrite-target" annotation
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      # ingress.kubernetes.io/rewrite-target: /
    tls: false
    secretName:
  resources:
    {}
    # limits:
    #   cpu: 400m
    #   memory: 2792Mi
    # requests:
    #   cpu: 100m
    #   memory: 2280Mi
  configmap:
    enabled: false
    data:
      # passwordprofileinitcfg.yaml: |
      #  ...
      # roleinitcfg.yaml: |
      #  ...
      # ldapinitcfg.yaml: |
      #  ...
      # oidcinitcfg.yaml: |
      # ...
      # samlinitcfg.yaml: |
      # ...
      # sysinitcfg.yaml: |
      # ...
      # userinitcfg.yaml: |
      # ...
      # fedinitcfg.yaml: |
      # ...
  secret:
    # NOTE: files defined here have preferrence over the ones defined in the configmap section
    enabled: false
    data:
      # passwordprofileinitcfg.yaml:
      #  ...
      # roleinitcfg.yaml:
      #  ...
      # ldapinitcfg.yaml:
      #   directory: OpenLDAP
      #   ...
      # oidcinitcfg.yaml:
      #   Issuer: https://...
      #   ...
      # samlinitcfg.yaml:
      #   ...
      # sysinitcfg.yaml:
      #   ...
      userinitcfg.yaml:
        users:
        - Fullname: admin
          Password:
          Role: admin
  certupgrader:
    env: []
    # The cronjob schedule that cert-upgrader will run to check and rotate internal certificate.
    # default: "" (off)
    schedule: ""
    imagePullPolicy: Always
    timeout: 3600
    priorityClassName:
    podLabels: {}
    podAnnotations:
      traffic.sidecar.istio.io/excludeInboundPorts: "18500"
      traffic.sidecar.istio.io/excludeOutboundPorts: "18500"
    tolerations: []
    nodeSelector:
      {}
      # key1: value1
      # key2: value2
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000 # MUST be set for Rancher hardened cluster
      runAsGroup: 1000
      fsGroup: 1000
    containerSecurityContext:
      runAsUser: 1000 # MUST be set for Rancher hardened cluster
      runAsGroup: 1000
      runAsNonRoot: true
      capabilities:
        drop:
          - ALL
  prime:
    enabled: false
    image:
      repository: neuvector/compliance-config
      tag: 1.0.5
      hash:
enforcer:
  # If false, enforcer will not be installed
  enabled: true
  image:
    repository: ironbank/neuvector/neuvector/enforcer
    imagePullPolicy: Always
    hash:
  updateStrategy:
    type: RollingUpdate
  priorityClassName:
  podLabels: {}
  podAnnotations:
    traffic.sidecar.istio.io/excludeInboundPorts: "18500"
  containerSecurityContext:
    privileged: true
    runAsGroup: 1000
    capabilities:
      drop:
        - ALL
  env: []
  tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
  resources:
    {}
    # limits:
    #   cpu: 400m
    #   memory: 2792Mi
    # requests:
    #   cpu: 100m
    #   memory: 2280Mi
  internal: # this is used for internal communication. Please use the SAME CA for all the components (controller, scanner, adapter and enforcer)
    certificate:
      secret: ""
      keyFile: tls.key
      pemFile: tls.crt
      caFile: ca.crt # must be the same CA for all internal.
manager:
  # If false, manager will not be installed
  enabled: true
  image:
    repository: ironbank/neuvector/neuvector/manager
    imagePullPolicy: Always
    hash:
  priorityClassName:
  env:
  ## BB specific change
    ssl: false
    envs:
      # This setting should be enabled when in FIPS environments to prevent Java errors arising from the FIPS alignment
      - name: JDK_JAVA_OPTIONS
        value: "-Dcom.redhat.fips=false"
  svc:
    type: ClusterIP
    nodePort:
    loadBalancerIP:
    annotations:
      {}
      # azure
      # service.beta.kubernetes.io/azure-load-balancer-internal: "true"
      # service.beta.kubernetes.io/azure-load-balancer-internal-subnet: "apps-subnet"
  # OpenShift Route configuration
  # Make sure manager env ssl is false for edge termination
  route:
    enabled: true
    termination: passthrough
    host:
    tls:
      #certificate: |
      #  -----BEGIN CERTIFICATE-----
      #  -----END CERTIFICATE-----
      #caCertificate: |
      #  -----BEGIN CERTIFICATE-----
      #  -----END CERTIFICATE-----
      #destinationCACertificate: |
      #  -----BEGIN CERTIFICATE-----
      #  -----END CERTIFICATE-----
      #key: |
      #  -----BEGIN PRIVATE KEY-----
      #  -----END PRIVATE KEY-----
  certificate:
    secret: ""
    keyFile: tls.key
    pemFile: tls.pem
    #key: |
    #  -----BEGIN PRIVATE KEY-----
    #  -----END PRIVATE KEY-----
    #certificate: |
    #  -----BEGIN CERTIFICATE-----
    #  -----END CERTIFICATE-----
  ingress:
    enabled: false
    host: # MUST be set, if ingress is enabled
    ingressClassName: ""
    path: "/"
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      # kubernetes.io/ingress.class: my-nginx
      # nginx.ingress.kubernetes.io/whitelist-source-range: "1.1.1.1"
      # nginx.ingress.kubernetes.io/rewrite-target: /
      # nginx.ingress.kubernetes.io/enable-rewrite-log: "true"
      # only for end-to-end tls conf - ingress-nginx accepts backend self-signed cert
    tls: false
    secretName: # my-tls-secret
  resources:
    {}
    # limits:
    #   cpu: 400m
    #   memory: 2792Mi
    # requests:
    #   cpu: 100m
    #   memory: 2280Mi
  topologySpreadConstraints: []
  affinity: {}
  podLabels: {}
  podAnnotations:
    traffic.sidecar.istio.io/excludeInboundPorts: "18500"
  containerSecurityContext:
    runAsUser: 1000
    runAsGroup: 1000
    runAsNonRoot: true
    capabilities:
      drop:
        - ALL
  tolerations: []
  nodeSelector:
    {}
    # key1: value1
    # key2: value2
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000 # MUST be set for Rancher hardened cluster
    runAsGroup: 1000
    fsGroup: 1000
  probes:
    enabled: false
    timeout: 1
    periodSeconds: 10
    startupFailureThreshold: 30
cve:
  adapter:
    enabled: false
    image:
      registry: "registry1.dso.mil"
      repository: ironbank/opensource/neuvector/registry-adapter
      tag: v0.1.8
      hash:
    priorityClassName:
    resources:
      {}
      # limits:
      #   cpu: 400m
      #   memory: 512Mi
      # requests:
      #   cpu: 100m
      #   memory: 1024Mi
    affinity: {}
    podLabels: {}
    podAnnotations:
      traffic.sidecar.istio.io/excludeInboundPorts: "18500"
    env: []
    tolerations: []
    nodeSelector:
      {}
      # key1: value1
      # key2: value2
    securityContext:
      runAsUser: 1000 # MUST be set for Rancher hardened cluster
      runAsGroup: 1000
      fsGroup: 1000
      runAsNonRoot: true
    ## TLS cert/key.  If absent, TLS cert/key automatically generated will be used.
    ##
    ## default: (none)
    certificate:
      secret: ""
      keyFile: tls.key
      pemFile: tls.crt
    #key: |
    #  -----BEGIN PRIVATE KEY-----
    #  -----END PRIVATE KEY-----
    #certificate: |
    #  -----BEGIN CERTIFICATE-----
    #  -----END CERTIFICATE-----
    harbor:
      protocol: https
      secretName:
    svc:
      type: ClusterIP
      loadBalancerIP:
      annotations:
        {}
        # azure
        # service.beta.kubernetes.io/azure-load-balancer-internal: "true"
        # service.beta.kubernetes.io/azure-load-balancer-internal-subnet: "apps-subnet"
    # OpenShift Route configuration
    route:
      enabled: true
      termination: passthrough
      host:
      tls:
        #certificate: |
        #  -----BEGIN CERTIFICATE-----
        #  -----END CERTIFICATE-----
        #caCertificate: |
        #  -----BEGIN CERTIFICATE-----
        #  -----END CERTIFICATE-----
        #destinationCACertificate: |
        #  -----BEGIN CERTIFICATE-----
        #  -----END CERTIFICATE-----
        #key: |
        #  -----BEGIN PRIVATE KEY-----
        #  -----END PRIVATE KEY-----
    ingress:
      enabled: false
      host: # MUST be set, if ingress is enabled
      ingressClassName: ""
      path: "/"
      annotations:
        nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        # kubernetes.io/ingress.class: my-nginx
        # nginx.ingress.kubernetes.io/whitelist-source-range: "1.1.1.1"
        # nginx.ingress.kubernetes.io/rewrite-target: /
        # nginx.ingress.kubernetes.io/enable-rewrite-log: "true"
        # only for end-to-end tls conf - ingress-nginx accepts backend self-signed cert
      tls: false
      secretName: # my-tls-secret
    internal: # this is used for internal communication. Please use the SAME CA for all the components (controller, scanner, adapter and enforcer)
      certificate:
        secret: ""
        keyFile: tls.key
        pemFile: tls.crt
        caFile: ca.crt # must be the same CA for all internal.
  updater:
    # If false, cve updater will not be installed
    enabled: true
    secure: false
    cacert: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    image:
      registry: "registry1.dso.mil"
      repository: ironbank/big-bang/base
      imagePullPolicy: Always
      tag: 2.1.0
      hash:
    schedule: "0 0 * * *"
    priorityClassName:
    resources:
      {}
      # limits:
      #   cpu: 100m
      #   memory: 256Mi
      # requests:
      #   cpu: 100m
      #   memory: 256Mi
    podLabels: {}
    podAnnotations:
      traffic.sidecar.istio.io/excludeInboundPorts: "18500"
    tolerations: []
    nodeSelector:
      {}
      # key1: value1
      # key2: value2
    securityContext:
      runAsUser: 1000 # MUST be set for Rancher hardened cluster
      runAsGroup: 1000
      fsGroup: 1000
      runAsNonRoot: true
    containerSecurityContext:
      runAsUser: 1000
      runAsGroup: 1000
      runAsNonRoot: true
      capabilities:
        drop:
          - ALL
  scanner:
    enabled: true
    replicas: 3
    dockerPath: ""
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    image:
      repository: ironbank/neuvector/neuvector/scanner
      imagePullPolicy: Always
      tag: "6"
      hash:
    priorityClassName:
    resources:
      {}
      # limits:
      #   cpu: 400m
      #   memory: 2792Mi
      # requests:
      #   cpu: 100m
      #   memory: 2280Mi
    topologySpreadConstraints: []
    affinity: {}
    podLabels: {}
    podAnnotations:
      traffic.sidecar.istio.io/excludeInboundPorts: "18500"
    env: []
    tolerations: []
    nodeSelector:
      {}
      # key1: value1
      # key2: value2
    runAsUser: 1000 # MUST be set for Rancher hardened cluster
    # securityContext:
    #   runAsNonRoot: true
    #   runAsUser: 1000 # MUST be set for Rancher hardened cluster
    #   runAsGroup: 1000
    #   fsGroup: 1000
    internal: # this is used for internal communication. Please use the SAME CA for all the components ( controller, scanner, and enforcer ) The cert needs to have a CN of "NeuVector"
      certificate:
        secret: ""
        keyFile: tls.key
        pemFile: tls.crt
        caFile: ca.crt # must be the same CA for all internal.
    containerSecurityContext:
      runAsUser: 1000
      runAsGroup: 1000
      runAsNonRoot: true
      capabilities:
        drop:
          - ALL
    volumes:
    volumeMounts:
resources:
  {}
  # limits:
  #   cpu: 400m
  #   memory: 2792Mi
  # requests:
  #   cpu: 100m
  #   memory: 2280Mi

runtimePath:

# The following runtime type and socket location are deprecated after 5.3.0.
# If the socket path is not at the default location, use above 'runtimePath' to specify the location.
docker:
  path: /var/run/docker.sock

k3s:
  enabled: false
  runtimePath: /run/k3s/containerd/containerd.sock

bottlerocket:
  enabled: false
  runtimePath: /run/dockershim.sock

containerd:
  enabled: false
  path: /var/run/containerd/containerd.sock

crio:
  enabled: false
  path: /var/run/crio/crio.sock

admissionwebhook:
  type: ClusterIP

crdwebhooksvc:
  enabled: true

crdwebhook:
  enabled: true
  type: ClusterIP

lease:
  enabled: true

## BB specific changes
# From https://github.com/neuvector/neuvector-helm/blob/master/charts/monitor/values.yaml
monitor:
  imagePullSecrets: private-registry
  install: false

  # Default values for neuvector monitor subchart.
  # Declare variables to be passed into the templates.

  serviceAccount: default

  registry: registry1.dso.mil
  oem: ''
  leastPrivilege: false # Inherited from parent chart

  exporter:
    # If false, exporter will not be installed
    enabled: false
    image:
      repository: ironbank/neuvector/neuvector/prometheus-exporter
      tag: 1-1.0.0
      imagePullPolicy: Always
    # changes this to a readonly user !
    CTRL_USERNAME: admin
    CTRL_PASSWORD: admin
    ctrlSercretName: ''
    enforcerStats:
      enabled: false
    ctrlSecretName: ''
    apiSvc: neuvector-svc-controller-api:10443
    podLabels: {}
    securityContext: {} # Inherited from parent chart if leastPrivilege is true
    containerSecurityContext: # Inherited from parent chart if leastPrivilege is true
      runAsUser: 1001
      runAsGroup: 1001
      capabilities:
        drop:
          - ALL

    svc:
      enabled: true
      type: ClusterIP
      loadBalancerIP: ''
      annotations: {}
        # service.beta.kubernetes.io/azure-load-balancer-internal: "true"
        # service.beta.kubernetes.io/azure-load-balancer-internal-subnet: "apps-subnet"

    grafanaDashboard:
      enabled: false
      namespace: "" # Release namespace, if empty
      labels: {}
      # annotations: {}
        # k8s-sidecar-target-directory: /tmp/dashboards/neuvector

    serviceMonitor:
      enabled: false # Defaulted to false in parent chart
      # labels for the ServiceMonitor.
      labels: {}
      # annotations for the ServiceMonitor.
      annotations: {}
      # Scrape interval. If not set, the Prometheus default scrape interval is used.
      interval: ""
      # MetricRelabelConfigs to apply to samples after scraping, but before ingestion.
      # ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#relabelconfig
      metricRelabelings: []
      # RelabelConfigs to apply to samples before scraping
      # ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#relabelconfig
      relabelings: []

monitoring:
  enabled: false
  namespace: monitoring

domain: dev.bigbang.mil

istio:
  enabled: false
  injection: "enabled"
  hardened:
    enabled: false
    customAuthorizationPolicies: []
    # - name: "allow-nothing"
    #   enabled: true
    #   spec: {}
    outboundTrafficPolicyMode: "REGISTRY_ONLY"
    monitoring:
      enabled: true
      namespaces:
        - monitoring
      principals:
        - cluster.local/ns/monitoring/sa/monitoring-grafana
        - cluster.local/ns/monitoring/sa/monitoring-monitoring-kube-alertmanager
        - cluster.local/ns/monitoring/sa/monitoring-monitoring-kube-operator
        - cluster.local/ns/monitoring/sa/monitoring-monitoring-kube-prometheus
        - cluster.local/ns/monitoring/sa/monitoring-monitoring-kube-state-metrics
        - cluster.local/ns/monitoring/sa/monitoring-monitoring-prometheus-node-exporter
    customServiceEntries: []
    # - name: "allow-google"
    #   enabled: true
    #   spec:
    #     hosts:
    #       - google.com
    #     location: MESH_EXTERNAL
    #     ports:
    #       - number: 443
    #         protocol: TLS
    #         name: https
    #     resolution: DNS
  neuvector:
    enabled: true
    annotations: {}
    labels: {}
    gateways:
      - istio-system/main
    hosts:
      - neuvector.{{ .Values.domain }}
  # -- Default neuvector peer authentication
  mtls:
    # -- STRICT = Allow only mutual TLS traffic,
    # PERMISSIVE = Allow both plain text and mutual TLS traffic
    mode: STRICT



networkPolicies:
  enabled: false
  ingressLabels:
    app: istio-ingressgateway
    istio: ingressgateway
  controlPlaneCidr: 0.0.0.0/0
  additionalPolicies: []
# Bigbang helm test values default disabled
bbtests:
  enabled: false
  cypress:
    artifacts: true
    envs:
      cypress_url: "http://neuvector-service-webui.{{ .Release.Namespace }}.svc.cluster.local:8443"
    resources:
      requests:
        cpu: "2"
        memory: "4Gi"
      limits:
        cpu: "2"
        memory: "4Gi"
  scripts:
    envs:
      URL: "http://neuvector-service-webui.{{ .Release.Namespace }}.svc.cluster.local:8443"
exporter:
  enabled: false
