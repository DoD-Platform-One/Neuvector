{{- if .Values.exporter.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: neuvector-prometheus-exporter-pod
  namespace: {{ .Release.Namespace }}
  labels:
    chart: {{ template "neuvector.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: neuvector-prometheus-exporter-pod
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8068"
        prometheus.io/scrape: "true"
        {{- if .Values.exporter.podAnnotations }}
        {{- toYaml .Values.exporter.podAnnotations | nindent 8 }}
        {{- end }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
      labels:
        app: neuvector-prometheus-exporter-pod
        release: {{ .Release.Name }}
        version: {{ .Chart.AppVersion }}
    spec:
    {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets }}
    {{- end }}
    {{- if .Values.leastPrivilege }}
      serviceAccountName: basic
      serviceAccount: basic
    {{- else }}
      serviceAccountName: {{ .Values.serviceAccount }}
      serviceAccount: {{ .Values.serviceAccount }}
    {{- end }}
      containers:
        - name: neuvector-prometheus-exporter-pod
          {{ if eq .Values.registry "docker.io/neuvector" }}
          {{ if .Values.oem }}
          image: "{{ .Values.registry }}/{{ .Values.oem }}/prometheus-exporter:{{ .Values.exporter.image.tag }}"
          {{- else }}
          image: "{{ .Values.registry }}/prometheus-exporter:{{ .Values.exporter.image.tag }}"
          {{- end }}
          {{- else }}
          image: "{{ .Values.registry }}/{{ .Values.exporter.image.repository }}:{{ .Values.exporter.image.tag }}"
          {{- end }}
          imagePullPolicy: Always
          securityContext:
            {{- toYaml $.Values.exporter.containerSecurityContext | nindent 12 }}
          command: [ "sh", "-c", "until curl -s --connect-timeout 5 -k https://neuvector-svc-controller:10443 | grep \"URL not found\" ; do sleep 5; echo \"Health check failed. Waiting for controller.\"; done; echo \"Controller found.\"; python3 -u /usr/local/bin/nv_exporter.py"]
          env:
            - name: CTRL_API_SERVICE
              value: neuvector-svc-controller:10443
            - name: EXPORTER_PORT
              value: "8068"
          envFrom:
            - secretRef:
                name: neuvector-prometheus-exporter-pod-secret
      restartPolicy: Always
{{- end }}
